_flavor=edge
pkgname=linux-${_flavor}
pkgver=6.1.12
case $pkgver in
    *.*.*)    _kernver=${pkgver%.*};;
    *.*) _kernver=$pkgver;;
esac
pkgrel=1
pkgdesc="Linux latest stable kernel"
url="https://www.kernel.org"
depends="initramfs-generator py3-blessed py3-pip coreutils musl-dev gcc st libnetfilter_queue-dev linux-headers"
_depends_dev="perl gmp-dev elfutils-dev bash flex bison"
makedepends="$_depends_dev sed installkernel bc linux-headers linux-firmware-any
    openssl-dev diffutils findutils xz"
options="!strip !check" # no tests
_config=${config:-config-edge.${CARCH}}
install=

subpackages="$pkgname-dev:_dev:$CBUILD_ARCH"
source="https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/linux-$_kernver.tar.xz"
case $pkgver in
    *.*.0)    source="$source";;
    *.*.*)    source="$source
    https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/patch-$pkgver.xz" ;;
esac

    source="$source
    0001-snitch.patch
    config-edge.aarch64
    config-edge.x86_64
    "

builddir="$srcdir/linux-${_kernver}"
arch="aarch64 x86_64"
license="GPL-2.0"

_flavors=
for _i in $source; do
    case $_i in
    config-*.$CARCH)
        _f=${_i%.$CARCH}
        _f=${_f#config-}
        _flavors="$_flavors ${_f}"
        if [ "linux-$_f" != "$pkgname" ]; then
            subpackages="$subpackages linux-${_f}::$CBUILD_ARCH linux-${_f}-dev:_dev:$CBUILD_ARCH"
        fi
        ;;
    esac
done

_carch=${CARCH}
case "$_carch" in
aarch64*) _carch="arm64" ;;
esac

prepare() {
    local _patch_failed=
  cd $builddir
    case $pkgver in
        *.*.0);;
        *)
        msg "Applying patch-$pkgver.xz"
        unxz -c < "$srcdir"/patch-$pkgver.xz | patch -p1 -N ;;
    esac

    # first apply patches in specified order
    for i in $source; do
        case $i in
        *.patch)
            msg "Applying $i..."
            if ! patch -s -p1 -N -i "$srcdir"/$i; then
                echo $i >>failed
                _patch_failed=1
            fi
            ;;
        esac
    done

    if ! [ -z "$_patch_failed" ]; then
        error "The following patches failed:"
        cat failed
        return 1
    fi

    # remove localversion from patch if any
    rm -f localversion*
    oldconfig
}

oldconfig() {
    for i in $_flavors; do
        local _config=config-$i.${CARCH}
        mkdir -p "$builddir"
        echo "-$pkgrel-$i" > "$builddir"/localversion-alpine \
            || return 1

        cp "$srcdir"/$_config "$builddir"/.config
        make -C $builddir \
            O="$builddir" \
            ARCH="$_carch" \
            listnewconfig oldconfig
    done
}

build() {
    unset LDFLAGS
    export KBUILD_BUILD_TIMESTAMP=""
    export CCACHE_DIR="/tmp/ccache"
    export CCACHE_SLOPPINESS=locale,time_macros
    mkdir -p $CCACHE_DIR
    for i in $_flavors; do
        cd "$builddir"
        make ARCH="$_carch" DTC_FLAGS="-@" KBUILD_BUILD_VERSION="$((pkgrel + 1 ))-Snitch"
    done
}

_package() {
    local _buildflavor="$1" _outdir="$2"
    local _abi_release=${pkgver}-${pkgrel}-${_buildflavor}
    export KBUILD_BUILD_TIMESTAMP=""

    cd "$builddir"
    # modules_install seems to regenerate a defect Modules.symvers on s390x. Work
    # around it by backing it up and restore it after modules_install
    cp Module.symvers Module.symvers.backup

    mkdir -p "$_outdir"/boot "$_outdir"/lib/modules

    local _install
    case "$CARCH" in
        aarch64) _install="zinstall dtbs_install";;
        *) _install=install;;
    esac

    make -j1 modules_install $_install \
        ARCH="$_carch" \
        INSTALL_MOD_PATH="$_outdir" \
        INSTALL_PATH="$_outdir"/boot \
        INSTALL_DTBS_PATH="$_outdir/boot/dtbs-$_buildflavor"

    cp Module.symvers.backup Module.symvers

    rm -f "$_outdir"/lib/modules/${_abi_release}/build \
        "$_outdir"/lib/modules/${_abi_release}/source
    rm -rf "$_outdir"/lib/firmware

    install -D -m644 include/config/kernel.release \
        "$_outdir"/usr/share/kernel/$_buildflavor/kernel.release
}

# main flavor installs in $pkgdir
package() {
    depends="$depends linux-firmware-any"

    _package edge "$pkgdir"
}

_dev() {

    local _flavor=$(echo $subpkgname | sed -E 's/(^linux-|-dev$)//g')
    local _abi_release=${pkgver}-${pkgrel}-$_flavor
    # copy the only the parts that we really need for build 3rd party
    # kernel modules and install those as /usr/src/linux-headers,
    # simlar to what ubuntu does
    #
    # this way you dont need to install the 300-400 kernel sources to
    # build a tiny kernel module
    #
    pkgdesc="Headers and script for third party modules for $_flavor kernel"
    depends="$_depends_dev"
    local dir="$subpkgdir"/usr/src/linux-headers-${_abi_release}
    export KBUILD_BUILD_TIMESTAMP=""

    # first we import config, run prepare to set up for building
    # external modules, and create the scripts
    mkdir -p "$dir"
    cp "$srcdir"/config-$_flavor.${CARCH} "$dir"/.config
    echo "-$pkgrel-$_flavor" > "$dir"/localversion-alpine
    cd $builddir

  echo "Installing headers..."
    case "$_carch" in
    x86_64)
        _carch="x86"
        install -Dt "${dir}/tools/objtool" $builddir/tools/objtool/objtool
        ;;
    esac
  cp -t "$dir" -a $builddir/include

  install -Dt "${dir}" -m644 $builddir/Makefile
  install -Dt "${dir}" -m644 $builddir/Module.symvers
  install -Dt "${dir}" -m644 $builddir/System.map
    cp -t "$dir" -a $builddir/scripts


  install -Dt "${dir}/arch/${_carch}" -m644 $builddir/arch/${_carch}/Makefile
  install -Dt "${dir}/arch/${_carch}/kernel" -m644 $builddir/arch/${_carch}/kernel/asm-offsets.s
  cp -t "${dir}/arch/${_carch}" -a $builddir/arch/${_carch}/include

  install -Dt "$dir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$dir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$dir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$dir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$dir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$dir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$dir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$dir"/arch/*/; do
        case $(basename "$arch") in $_carch) continue ;; esac
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

#  echo "Removing documentation..."
#  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
    mkdir -p "$subpkgdir"/lib/modules/${_abi_release}
    ln -sf /usr/src/linux-headers-${_abi_release} \
        "$subpkgdir"/lib/modules/${_abi_release}/build
}

sha512sums="
6ed2a73c2699d0810e54753715635736fc370288ad5ce95c594f2379959b0e418665cd71bc512a0273fe226fe90074d8b10d14c209080a6466498417a4fdda68  linux-6.1.tar.xz
02a058eb50464e0819f5b05ea5d154d2e7a944cf590224c4f4ff07e4f57f9173962e1b04e1a0cb4a55795f4f66fb80afb6686c9c75bce435c8dfb2b733bfe21f  patch-6.1.12.xz
e56760b5b24fd99eab81d14b52a05e804489ee3d8e372071f8a8cbddd863c061f4d6a525be4e527bc81d8dc573392dcdbf46955171c5201fad546d29d7a10071  0001-snitch.patch
118d9e4ff9490128c8156c2ad31d584b3affbaa61d18f44034c96da3caa2841e9b0a0858296d5e6873e95583bd4d11da76aeaf28a1e5a145bfb15d6e379aeeb5  config-edge.aarch64
ba64228ae08964fcea14194a0f91560acf601e95360997a431f97bacc4f91dece206b4ebb50ba1cfe8489afb940b91697f96bfae34e3c424a21c57798fa7f6b2  config-edge.x86_64
"
